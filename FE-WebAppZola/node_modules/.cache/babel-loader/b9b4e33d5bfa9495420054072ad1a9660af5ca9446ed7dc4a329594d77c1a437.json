{"ast":null,"code":"import { io } from \"socket.io-client\";\n\n// Tạo instance socket.io với cấu hình phù hợp\nconst createSocket = () => {\n  const socket = io(\"http://localhost:5000\", {\n    autoConnect: false,\n    reconnection: true,\n    reconnectionAttempts: Number.POSITIVE_INFINITY,\n    reconnectionDelay: 1000,\n    reconnectionDelayMax: 5000,\n    timeout: 20000,\n    transports: [\"websocket\"],\n    upgrade: false,\n    forceNew: true,\n    query: {\n      timestamp: Date.now()\n    }\n  });\n\n  // Xử lý các sự kiện socket\n  socket.on(\"connect\", () => {\n    console.log(\"Socket connected successfully! ID:\", socket.id);\n\n    // Lấy thông tin người dùng từ localStorage\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n    if (userProfile !== null && userProfile !== void 0 && userProfile.userId) {\n      socket.emit(\"user_connected\", userProfile.userId);\n    }\n  });\n  socket.on(\"connect_error\", err => {\n    console.error(\"Socket connection error:\", err);\n  });\n  socket.on(\"disconnect\", reason => {\n    console.log(\"Socket disconnected:\", reason);\n  });\n  socket.on(\"error\", err => {\n    console.error(\"Socket error:\", err);\n  });\n  socket.on(\"reconnect\", attemptNumber => {\n    console.log(\"Socket reconnected after\", attemptNumber, \"attempts\");\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n    if (userProfile !== null && userProfile !== void 0 && userProfile.userId) {\n      socket.emit(\"user_connected\", userProfile.userId);\n    }\n  });\n  socket.on(\"reconnect_error\", err => {\n    console.error(\"Socket reconnection error:\", err);\n  });\n  return socket;\n};\n\n// Tạo và export socket instance\nconst socket = createSocket();\nexport default socket;","map":{"version":3,"names":["io","createSocket","socket","autoConnect","reconnection","reconnectionAttempts","Number","POSITIVE_INFINITY","reconnectionDelay","reconnectionDelayMax","timeout","transports","upgrade","forceNew","query","timestamp","Date","now","on","console","log","id","userProfile","JSON","parse","localStorage","getItem","userId","emit","err","error","reason","attemptNumber"],"sources":["C:/Users/ADMIN/Desktop/Nhom12_Zalo_Web/FE-WebAppZola/src/services/socket.js"],"sourcesContent":["import { io } from \"socket.io-client\"\r\n\r\n// Tạo instance socket.io với cấu hình phù hợp\r\nconst createSocket = () => {\r\n  const socket = io(\"http://localhost:5000\", {\r\n    autoConnect: false,\r\n    reconnection: true,\r\n    reconnectionAttempts: Number.POSITIVE_INFINITY,\r\n    reconnectionDelay: 1000,\r\n    reconnectionDelayMax: 5000,\r\n    timeout: 20000,\r\n    transports: [\"websocket\"],\r\n    upgrade: false,\r\n    forceNew: true,\r\n    query: {\r\n      timestamp: Date.now(),\r\n    },\r\n  })\r\n\r\n  // Xử lý các sự kiện socket\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"Socket connected successfully! ID:\", socket.id)\r\n\r\n    // Lấy thông tin người dùng từ localStorage\r\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"))\r\n    if (userProfile?.userId) {\r\n      socket.emit(\"user_connected\", userProfile.userId)\r\n    }\r\n  })\r\n\r\n  socket.on(\"connect_error\", (err) => {\r\n    console.error(\"Socket connection error:\", err)\r\n  })\r\n\r\n  socket.on(\"disconnect\", (reason) => {\r\n    console.log(\"Socket disconnected:\", reason)\r\n  })\r\n\r\n  socket.on(\"error\", (err) => {\r\n    console.error(\"Socket error:\", err)\r\n  })\r\n\r\n  socket.on(\"reconnect\", (attemptNumber) => {\r\n    console.log(\"Socket reconnected after\", attemptNumber, \"attempts\")\r\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"))\r\n    if (userProfile?.userId) {\r\n      socket.emit(\"user_connected\", userProfile.userId)\r\n    }\r\n  })\r\n\r\n  socket.on(\"reconnect_error\", (err) => {\r\n    console.error(\"Socket reconnection error:\", err)\r\n  })\r\n\r\n  return socket\r\n}\r\n\r\n// Tạo và export socket instance\r\nconst socket = createSocket()\r\n\r\nexport default socket\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;;AAErC;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,MAAM,GAAGF,EAAE,CAAC,uBAAuB,EAAE;IACzCG,WAAW,EAAE,KAAK;IAClBC,YAAY,EAAE,IAAI;IAClBC,oBAAoB,EAAEC,MAAM,CAACC,iBAAiB;IAC9CC,iBAAiB,EAAE,IAAI;IACvBC,oBAAoB,EAAE,IAAI;IAC1BC,OAAO,EAAE,KAAK;IACdC,UAAU,EAAE,CAAC,WAAW,CAAC;IACzBC,OAAO,EAAE,KAAK;IACdC,QAAQ,EAAE,IAAI;IACdC,KAAK,EAAE;MACLC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IACtB;EACF,CAAC,CAAC;;EAEF;EACAf,MAAM,CAACgB,EAAE,CAAC,SAAS,EAAE,MAAM;IACzBC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAElB,MAAM,CAACmB,EAAE,CAAC;;IAE5D;IACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IACnE,IAAIJ,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEK,MAAM,EAAE;MACvBzB,MAAM,CAAC0B,IAAI,CAAC,gBAAgB,EAAEN,WAAW,CAACK,MAAM,CAAC;IACnD;EACF,CAAC,CAAC;EAEFzB,MAAM,CAACgB,EAAE,CAAC,eAAe,EAAGW,GAAG,IAAK;IAClCV,OAAO,CAACW,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAAC;EAChD,CAAC,CAAC;EAEF3B,MAAM,CAACgB,EAAE,CAAC,YAAY,EAAGa,MAAM,IAAK;IAClCZ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEW,MAAM,CAAC;EAC7C,CAAC,CAAC;EAEF7B,MAAM,CAACgB,EAAE,CAAC,OAAO,EAAGW,GAAG,IAAK;IAC1BV,OAAO,CAACW,KAAK,CAAC,eAAe,EAAED,GAAG,CAAC;EACrC,CAAC,CAAC;EAEF3B,MAAM,CAACgB,EAAE,CAAC,WAAW,EAAGc,aAAa,IAAK;IACxCb,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEY,aAAa,EAAE,UAAU,CAAC;IAClE,MAAMV,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IACnE,IAAIJ,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEK,MAAM,EAAE;MACvBzB,MAAM,CAAC0B,IAAI,CAAC,gBAAgB,EAAEN,WAAW,CAACK,MAAM,CAAC;IACnD;EACF,CAAC,CAAC;EAEFzB,MAAM,CAACgB,EAAE,CAAC,iBAAiB,EAAGW,GAAG,IAAK;IACpCV,OAAO,CAACW,KAAK,CAAC,4BAA4B,EAAED,GAAG,CAAC;EAClD,CAAC,CAAC;EAEF,OAAO3B,MAAM;AACf,CAAC;;AAED;AACA,MAAMA,MAAM,GAAGD,YAAY,CAAC,CAAC;AAE7B,eAAeC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}